<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">

	<!-- 회원가입 -->
	<insert id="join">
    INSERT INTO member(
        member_no, member_name, member_email, member_password,
        member_post, member_basic_addr, member_detail_addr,
        member_tel, member_gender, member_birth, member_nick
    ) VALUES (
        member_seq.nextval, #{memberName}, #{memberEmail}, #{memberPassword},
        #{memberPost}, #{memberBasicAddr}, #{memberDetailAddr}, #{memberTel},
        #{memberGender}, #{memberBirth}, #{memberNick}
    )
	</insert>
	
		<!-- 일반 회원가입 -->
	<insert id="socialJoin">
    INSERT INTO member(
        member_no, member_name, member_email, member_password,
        member_post, member_basic_addr, member_detail_addr,
        member_tel, member_gender, member_birth, member_nick
    ) VALUES (
        #{memberNo}, #{memberName}, #{memberEmail}, #{memberPassword},
        #{memberPost}, #{memberBasicAddr}, #{memberDetailAddr}, #{memberTel},
        #{memberGender}, #{memberBirth}, #{memberNick}
    )
	</insert>
	
	
	<!-- 로그인 -->
	<select id="login" resultType="MemberDto">
		select * from member where 
		member_email = #{memberEmail} and 
		member_password = #{memberPassword}
	</select>
	
	<!-- 단일회원 조회 -->
	<select id="findByNo" resultType="MemberDto">
		select * from member where member_no = #{memberNo}
	</select>
	
	<select id="findByEmail" resultType="MemberDto">
		select * from member where member_email = #{memberEmail}
	</select>
	
	<select id="findByNickName" resultType="MemberDto">
		select * from member where member_nick = #{memberNick}
	</select>
	

	
	<!-- 이메일 중복 확인 -->
	<select id="isEmailDuplicated" resultType="int">
		select count(*) from member where member_email = #{memberEmail}
	</select>
	
	<!-- 닉네임 중복 확인 -->
	<select id="isNickDuplicated" resultType="int">
		select count(*) from member where member_nick = #{memberNick}
	</select>
	
	<update id="updateTempPassword">
		update member set member_password = #{memberPassword} where member_email = #{memberEmail}
	</update>
	
	
	<!-- 회원정보 수정(패스워드 x)-->
	<update id="update">
		update member
		<set>	
			<if test="memberName!=null and !memberName.equals('')">
				,member_name=#{memberName}
			</if>
			<if test="memberEmail!=null and !memberEmail.equals('')">
				,member_email=#{memberEmail}
			</if>
			<if test="memberPost!=null and !memberPost.equals('')">
				,member_post=#{memberPost}
			</if>
			<if test="memberBasicAddr!=null and !memberBasicAddr.equals('')">
				,member_basic_addr=#{memberBasicAddr}
			</if>
			<if test="memberMsg!=null and !memberMsg.equals('')">
				,member_msg=#{memberMsg}
			</if>
			<if test="memberDetailAddr!=null and !memberDetailAddr.equals('')">
				,member_detail_addr=#{memberDetailAddr}
			</if>
			<if test="memberTel!=null and !memberTel.equals('')">
				,member_tel=#{memberTel}
			</if>
			<if test="memberGender!=null and !memberGender.equals('')">
				,member_gender=#{memberGender}
			</if>
			<if test="memberBirth!=null and !memberBirth.equals('')">
				,member_birth=#{memberBirth}
			</if>
			<if test="memberLat!=null and !memberLat.equals('')">
				,member_lat=#{memberLat}
			</if>
			<if test="memberLon!=null and !memberLon.equals('')">
				,member_lon=#{memberLon}
			</if>
		</set> 
		where member_no=#{memberNo} 
	</update>
	<!-- 회원정보 수정(패스워드)-->
	<update id="changePassword">
		update member set member_password=#{memberPassword} where member_email=#{memberEmail}
	</update>
	<!-- 로그인 시각 갱신 -->
	<update id="updateLoginTime">
		update member set member_login = sysdate where member_no = #{memberNo}
	</update>
	
	<!-- 닉네임 조회 -->
	<select id="nick" resultType="String" parameterType="Long">
		select member_nick from member where member_no = #{memberNo}
	</select>
	<!-- SQL 구문 조각 생성 -->
	<sql id="topNheader">
		select * from (
		select rownum rn, TMP.*from(
	</sql>
	<sql id="topNfooter">
		)TMP
		)where rn between #{begin} and #{end}
	</sql>
	
	
	<!-- 통계 -->
	<select id="memberStats" resultType="memberStatsResponseVO">
		<include refid="topNheader"></include>
		WITH all_parts AS (
			<choose>
				<when test="col.equals('days')">
					SELECT TRUNC(SYSDATE) - LEVEL + 1 AS date_part
					FROM dual
					<![CDATA[
					CONNECT BY LEVEL <= TRUNC(SYSDATE) - TO_DATE('2023-01-01', 'YYYY-MM-DD') + 1
					]]>
				</when>
				<otherwise>
					SELECT ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -LEVEL + 1) AS date_part
					FROM dual
					<![CDATA[
					CONNECT BY LEVEL <= MONTHS_BETWEEN(TRUNC(SYSDATE, 'MM'), TO_DATE('2023-01', 'YYYY-MM')) + 1
					]]>
				</otherwise>
			</choose>
		)
		SELECT TO_CHAR(
			all_parts.date_part,
			<choose>
				<when test="col.equals('days')">
					'MM/DD'
				</when>
				<otherwise>
					'YY/MM'
				</otherwise>
			</choose>
		) AS col, NVL(COUNT(member.${stat}), 0) AS count
		FROM all_parts
			<choose>
				<when test="col.equals('days')">
					LEFT JOIN member ON all_parts.date_part = TRUNC(member.${stat})
				</when>
				<otherwise>
					LEFT JOIN member ON TO_CHAR(all_parts.date_part, 'YYYY-MM') = TO_CHAR(member.${stat}, 'YYYY-MM')
				</otherwise>
			</choose>
		GROUP BY all_parts.date_part
		ORDER BY ${order}
		<include refid="topNfooter"></include>
	</select>
	<!-- 통계 누적 데이터 출력 -->
	<select id="memberStatsCumulative" resultType="memberStatsResponseVO">
		<include refid="topNheader"></include>
		SELECT
			<choose>
				<when test="col.equals('days')">
					TO_CHAR(TRUNC(${stat}), 'MM/DD') AS col,
					SUM(COUNT(*)) OVER (ORDER BY TRUNC(${stat}) ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS count
					FROM member
					GROUP BY TRUNC(${stat})
					ORDER BY TRUNC(${stat}) desc
				</when>
				<otherwise>
					TO_CHAR(${stat}, 'MM'), 'YY/MM') AS col,
					SUM(COUNT(*)) OVER (ORDER BY TRUNC(${stat}, 'MM') ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS count
					FROM member
					GROUP BY TO_CHAR(TRUNC(${stat}, 'MM'), 'YY/MM'), TRUNC(${stat}, 'MM')
					ORDER BY TRUNC(${stat}, 'MM') desc
				</otherwise>
			</choose>
		<include refid="topNfooter"></include>
	</select>
	
</mapper>